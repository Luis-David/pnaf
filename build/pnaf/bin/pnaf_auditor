#!/usr/bin/perl -w
##############################################################################
# PASSIVE NETWORK AUDIT FRAMEWORK
# Version 0.1.0
# By Javier Santillan [2014]
# ----------------------------------------------------------------------------
# 
# File		: PNAF agent
# Description 	: Main PNAF executer. It manages the framework's execution.
#
##############################################################################
use strict;
use warnings;
use Getopt::Long;
use Config::Auto;
use Pod::Usage;
use YAML;
use POSIX;
use Proc::Daemon;
use Pnaf::Core;
use Pnaf::Dcm;
use Pnaf::Dpm;
use Pnaf::Dvm;
##############################################################################
##############################################################################


##############################################################################
# Initial banner
my $self = "main";
printBanner();


##############################################################################
local $SIG{__WARN__} = sub {
    my $message = shift;
    chomp($message);
    if ($message =~ m/(Pnaf\/.*.pm)/ )
    {
	logMsgT($self,$message, 1, "$CFG::options{log_file}");
    }
    else
    {
	logMsgT($self,"External Warning: $message", 1,
		"$CFG::options{log_file}.ext_warnings", 0);
    }
};


##############################################################################
# Loading configuration parameters from config file and ARGV
loadConfig($self, "auditor");

##############################################################################
# Show sumary of configuration parameters
if ( $CFG::options{debug} =~ m/(yes)|1/ )
{
    showVersions($self, "debug");
    showCfg($self, "debug");
}

##############################################################################
# Validate options and show sumary
validateOptions($self);
showCfg($self, "summary"); 

##############################################################################
# Loading PNAF instance
my @parsers;
my $instance_name;
my $instance_json;
my $instance_logdir ;
if ( $CFG::options{parser} )
{
    @parsers = split(/,/,$CFG::options{parser});
}
else # default parsers
{
    push @parsers, 'argusFlow'; 
    push @parsers, 'p0f'; 
    push @parsers, 'prads'; 
    push @parsers, 'snortAppId'; 
    push @parsers, 'suricataHttp'; 
    push @parsers, 'httpry'; 
    push @parsers, 'tcpdstat'; 
    push @parsers, 'suricataEve'; 
    push @parsers, 'snortIds'; 
    push @parsers, 'bro'; 
}
if ( $CFG::options{cap_file} )
{
    logMsgT($self,"Processing PCAP file ( $CFG::options{cap_file})",
	    2, $CFG::options{log_file});  
    $instance_name   = loadPnafInstance($self,	$CFG::options{cap_file},
						$CFG::options{log_dir});
    if ( $CFG::args{log_dir} )
    {
	$instance_json   = "$CFG::options{log_dir}/json";
	$instance_logdir = $CFG::options{log_dir};
    }
    else
    {
	$instance_json   = "$CFG::options{dvm_web_dir}/$instance_name/json";
	$instance_logdir = "$CFG::options{log_dir}/$instance_name";
    }
    processDataset( $self, $instance_logdir, \@parsers, $instance_json);
}
elsif ( $CFG::options{instance_dir} )
{
    logMsgT($self,"Processing Instance data from ($CFG::options{instance_dir})",
	    2, $CFG::options{log_file});  
    if ( $CFG::options{log_dir} )
    {
	$instance_json = $CFG::options{log_dir};
	processDataset( $self	  , $CFG::options{instance_dir},
		        \@parsers , $instance_json);
    }
    else
    {
	$CFG::options{instance_dir} =~ m/[\/*.*]*([^\/]+\/*$)/;
	if ($1)
	{
	    $instance_name = $1;
	    $instance_json = "$CFG::options{dvm_web_dir}/$instance_name/json";
	    processDataset( $self	, $CFG::options{instance_dir},
			    \@parsers	, $instance_json);
	}
	else
	{
	    logMsgT($self,"Invalid instance directory ($1)",
		    0, $CFG::options{log_file});  
	}
    }
}
else
{
    logMsgT($self,"No input data was received. Please specify either a PCAP ".
	    "file or an INSTANCE data directory", 1, $CFG::options{log_file});
    logMsgT($self,"See '--help' option and tell me what to do.",
	    1, $CFG::options{log_file});  
}


__END__

=head1 PNAF v0.1.2

    Passive Network Audit Framework

=head1 SYNOPSIS

    $ pnaf_auditor [options]

    Options:
    ===========================================================================

	Execution:
	--debug                 : Enable debug mode
	--conf                  : Specify configuration file (yaml)
	--help                  : Show this
	--version               : Show tools versions
	--parser arg1[,arg2]    : Specify parsers to be loaded
	    'p0f'               : Process enumeration data
	    'prads'             : Process enumeration data
	    'argusFlow'         : Process NFA data (flow analysis)
	    'snortAppId'        : Process enumeration data (App identification)
	    'httpry'            : DPI over HTTP (URL's, UA, etc)
	    'tcpdstat'          : Process enumeration data (protocol dist)
	    'suricataEve'       : Process IDS data (alerts and payloads)
	    'bro'               : DPI over different protocols
	    'tcpflow'           : Process NFA data (session tracking)
	--out_dataset           : Specify the kind of output data to generate
	    'all'               : Generate all datasets
	    'audit'             : Generate only audit dataset
	--home_net              : Specify the 'homenet' in CIDR format
	--payload               : Flag to enable payload decoding (IDS data)

	Inputs:
	--cap_file              : Set input capture file (pcap)
	--audit_dict            : Path to vulnerability dictionary
	--instance_dir          : Path to directory with 'initial raw dataset'

	Logging:
	--log_dir  		: Path to log directory
	--log_file 		: Path to output directory

    
    Examples
    ===========================================================================

    >> Perform a basic execution: All parsers/tools enabled
        $ pnaf_auditor --cap_file test1.cap --log_dir /pnaf/www/test1

    >> Perform analysis of existing "raw logs" from tools
        Note: input directory must contains actual raw logs that are generated
              by Tools (e.g. Snort unified2 files, Suricata JSON output, p0f
              logs, etc
        $ pnaf_auditor --instance_dir existinglogs --log_dir /pnaf/www/exlogs

    >> Perform analysis of IDS tools only
        $pnaf_auditor --cap_file test2.cap --log_dir /pnaf/www/test2 \
            --parser bro,snort,suricataEve

    >> Perform analysis with homenet: When a homenet is specified, audit is 
       focused only on homenet IP addresses/networks and Flow data (stats) are
       separated from External networks (useful to identify usage and filter
       out devices)
        $pnaf_auditor --cap_file test3.cap --log_dir /pnaf/www/test3 \
            --homenet 192.168.1.0/14,192.168.2.30/27
       
    >> Perform analysis decoding payloads from unified2 file (Snort) stored
       within a certain existing directory.
        $pnaf_auditor --instance_dir mysnortfiles --payload

    
    WEB VISUALIZATION
    ===========================================================================

    A (very) basic Web visualization can be used within PNAF. 
    To start HTTP daemon:

        # /pnaf/bin/apachectl

    Then place output directories within 
        
        /pnaf/www/ 

    Output data that is generated on '--log_dir' generates a tree as follows:

    DIRECTORY_NAME/                     (Raw logs genrated by tools)
    |
    |----- JSON/                        (Parsed files in JSON format)
    |       |
    |       |-------SUMMARY/            (JSON tree view of dataset and audits)
    |       |       |                   (This is the main basic visualizer)
    |       |       |
    |       |       |---dataset         (Parsed data of all toolsets)
    |       |       |---auditSummary    (Summary of audit information)
    |       |       |---dataset.html    (All software found within trafic)
    |       |       |---auditOutput     (Audit based on CVE (NIST) and software)
    |       |       |---dataset.html    (Audit data sorted per single asset)
    |       |
    |       |-------VIEW1/          (Alternative JSON viewer)
    |       |
    |       |-------VIEWs/          (Deprecated)

    Author
    ===========================================================================
    Javier Santillan [2014]
        <jusafing@gmail.com>
    
    VERSION NOTES
    ===========================================================================
    Prototype version 0.1.2. 
    Some parsers/functionalities from the original prototype are not included. 
    ... YET. Next release will contain additional parsers/features

    For further updates visit:
        http://blog.honeynet.org.mx
        http://sec.jusanet.org
        http://www.honeynet.unam.mx
    
    ---------------------------------------------------------------------------
    Morris off!
    |
    ,

=head1 OPTIONS

=over 8

=item B<-help>
    Print a brief help message and exits.

=back

=head1 DESCRIPTION
    B<PNAF> is a framework intended to provide the capability of getting
    a security assessment of network plattforms (small, medium and large)
    by analysing in-depth the network traffic (in a passive way) and by
    providing a high-level interpretation in an automated way. It combines
    differet analysis techniques, algorithms and technologies. To this
    extent, the framework is intended to achieve the following goals:
    Architecture:
	a. To be a flexible, scalable and modular framework
	b. To provide accurate analysis of network plattforms
	c. To provide a useful API in order to develop further features
	   and improvements
    Functional:
	a. Summary of the Security Level of the network
	b. Findings of anomalous activities
	c. Findings of security audit policy
	d. Findings of impact analysis
	e. Summary of security recommendations
	f. Reference of evidence

=head1 AUTHOR

    Javier Santillan
    jusafing@gmail.com


=cut

